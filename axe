#!/usr/bin/ruby

require 'shellwords'
require 'rb-inotify'
require 'pathname'


class Axe
  def initialize (targets, command)
    @targets = targets
    @command = command
    @last_executed = Time.new
    banner
  end

  def run
    notifier = INotify::Notifier.new
    @targets.each do
      |path|
      path = Pathname(path)
      abort "File not found: #{path}" unless path.exist?
      flags = [:create, :delete, :modify, :attrib]
      flags << :recursive if path.directory?
      notifier.watch(path.to_s, *flags, &self.method(:execute))
    end
    execute_command()
    notifier.run
  end

  private def banner
    puts <<-"EOM"
==================================================
targets:   #{@targets.join("\n         ")}
command: #{@command}
==================================================
    EOM
  end

  private def execute (_)
    now = Time.new
    return if @last_executed && (now - @last_executed) < 1
    sleep 0.2
    puts "[#{now}]"
    execute_command
    @last_executed = Time.new
  end

  private def execute_command ()
    system(@command)
    puts '=================================================='
  end
end


class AxeOption
  attr_reader :targets, :command

  def initialize (args)
    if args.last == '-'
      @targets = args[0..-2]
      @command = STDIN.read.chomp
    elsif STDIN.tty?
      watch, cmd = [], []

      target = watch
      args.each do
        |arg|
        next target = cmd if watch == target and arg == '-'
        target << arg
      end

      if target == watch
        watch, cmd = [target.first], target[1..-1]
      end

      cmd = watch if watch.size == 1 and cmd.empty?

      if watch.empty? or !cmd or cmd.empty?
        abort <<-"EOT"
  Usage: #{File.basename($0)} <DIRECTORY/FILE> <DIRECTORY/FILE> ... "-" <COMMAND>
         or
         #{File.basename($0)} <DIRECTORY/FILE> <COMMAND>
      EOT
      end

      @targets = watch
      @command = cmd.map(&:shellescape).join(' ')
    else
      @targets = args
      @command = STDIN.read
    end
  end
end


if __FILE__ == $0
  option = AxeOption.new(ARGV)
  axe = Axe.new(option.targets, option.command)
  axe.run
end
